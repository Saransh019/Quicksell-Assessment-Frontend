[{"/home/saransh/QuickSell_B20132/src/index.js":"1","/home/saransh/QuickSell_B20132/src/App.js":"2","/home/saransh/QuickSell_B20132/src/Components/Editabled/Editable.js":"3","/home/saransh/QuickSell_B20132/src/Components/Board/Board.js":"4","/home/saransh/QuickSell_B20132/src/Components/Card/Card.js":"5","/home/saransh/QuickSell_B20132/src/Components/Card/CardInfo/CardInfo.js":"6"},{"size":219,"mtime":1696519179265,"results":"7","hashOfConfig":"8"},{"size":8827,"mtime":1696517329209,"results":"9","hashOfConfig":"8"},{"size":1389,"mtime":1696494843171,"results":"10","hashOfConfig":"8"},{"size":2332,"mtime":1696517888725,"results":"11","hashOfConfig":"8"},{"size":1037,"mtime":1696516967987,"results":"12","hashOfConfig":"8"},{"size":6474,"mtime":1696517667863,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zj67vc",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/saransh/QuickSell_B20132/src/index.js",[],"/home/saransh/QuickSell_B20132/src/App.js",["29","30","31","32","33","34","35","36"],"import React, { useEffect, useState } from \"react\";\n\nimport Board from \"./Components/Board/Board\";\n\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n\n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch(\"https://api.quicksell.co/v1/internal/frontend-assignment\")\n      .then((response) => response.json())\n      .then((responseData) => handleData(responseData))\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  const [user_board, set_user_board] = useState([]);\n  const [priority_board, set_priority_board] = useState([]);\n  const [status_board, set_status_board] = useState([]);\n  const priority_map = {\n    0 : \"No Priority\",\n    1 : \"Low\",\n    2 : \"medium\",\n    3 : \"High\",\n    4 : \"Urgent\"\n  };\n\n  const handleData = (responseData) => {\n    console.log(responseData);\n    setData(responseData);\n    {\n      responseData.tickets.map((ticket) => {\n        var uindex = user_board.findIndex(\n          (item) => item.title === ticket.userId\n        );\n        if (uindex != -1) {\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        } else {\n          let tempBoards = user_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.userId,\n            cards: [],\n          });\n          set_user_board(tempBoards);\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        }\n\n        var sindex = status_board.findIndex(\n          (item) => item.title === ticket.status\n        );\n        if (sindex != -1) {\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        } else {\n          let tempBoards = status_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.status,\n            cards: [],\n          });\n          set_status_board(tempBoards);\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        }\n\n        var pindex = priority_board.findIndex(\n          (item) => item.title === priority_map[ticket.priority]\n        );\n        if (pindex != -1) {\n          addCardss(\n            priority_map[ticket.priority],\n            priority_board,\n            ticket,\n            set_priority_board\n          );\n        } else {\n          let tempBoards = priority_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title:  priority_map[ticket.priority],\n            cards: [],\n          });\n          set_priority_board(tempBoards);\n          addCardss(\n            priority_map[ticket.priority],\n            priority_board,\n            ticket,\n            set_priority_board\n          );\n        }\n      });\n    }\n  };\n\n  const addCardss = (name, board, card, set_board) => {\n    console.log(\"red\", name, board, card);\n    const index = board.findIndex((item) => item.title == name);\n    console.log(index);\n    if (index < 0) return;\n    let tempBoards = [...board];\n    console.log(\"reached\");\n    // console.log(...card, \"erere\");\n    const obj = {\n      id: Date.now() + Math.random() * 2,\n      title: card.id,\n      desc: card.title,\n      user: card.userId,\n      status: card.status,\n      tag: card.tag[0],\n      priority: card.priority,\n    };\n    console.log(\"onject\", obj);\n    tempBoards[index].cards.push(obj);\n    set_board(tempBoards);\n  };\n\n  const [boards, setBoards] = useState(status_board);\n\n  // console.log(data);\n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = (id) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee, descc, user, status, tag, priority) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n    // console.log(descc);\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title: titlee,\n      desc: descc,\n      user,\n      status,\n      tag,\n      priority,\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) return;\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    tempBoards[index].cards[cardIndex] = card;\n\n    setBoards(tempBoards);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  function abbc() {\n    // console.log(\"fsadfad\");\n    setSortPriority(true);\n  }\n  function bbbc() {\n    // console.log(\"dsffsfs\");\n    setSortPriority(false);\n  }\n  function setUser() {\n    setBoards(user_board);\n  }\n  function setPriority() {\n    setBoards(priority_board);\n  }\n  function setStatus() {\n    setBoards(status_board);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n        <h1>Quicksell</h1>\n        <br></br>\n        <h3>Saransh Bansal</h3>\n        <br></br>\n\n        <select name=\"language\" id=\"language\" className=\"dropdownn\">\n          <option value=\"Sorting\" disabled selected>\n            Sorting\n          </option>\n          <option value=\"Name\" onClick={bbbc}>\n            Name\n          </option>\n          <option value=\"Priority\" onClick={abbc}>\n            Priority\n          </option>\n        </select>\n\n        <select name=\"language\" id=\"language\" className=\"dropdownn\">\n          <option value=\"Grouping\" disabled selected>\n            Grouping\n          </option>\n          <option value=\"User\" onClick={setUser}>\n            User\n          </option>\n          <option value=\"Status\" onClick={setStatus}>\n            Status\n          </option>\n          <option value=\"Priority\" onClick={setPriority}>\n            Priority\n          </option>\n        </select>\n      </div>\n      <div className=\"app_boards_container\">\n        <div className=\"app_boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              dragEnded={dragEnded}\n              dragEntered={dragEntered}\n              updateCard={updateCard}\n              sortPriority={sortPriority}\n            />\n          ))}\n          <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/saransh/QuickSell_B20132/src/Components/Editabled/Editable.js",[],"/home/saransh/QuickSell_B20132/src/Components/Board/Board.js",["37"],"// import React, { useState } from \"react\";\nimport Card from \"../Card/Card\";\nimport Editable from \"../Editabled/Editable\";\n\nimport \"./Board.css\";\n\nconst ASC = 'ascending';\nfunction sortByPriority(a, b, order = ASC) {\n    const diff = a.priority - b.priority;\n\n    if (order === ASC) {\n        return diff;\n    }\n\n    return -1 * diff;\n}\n\nfunction sortByTitle(a, b, order = ASC) {\n    if(a.title.length!=b.title.length) return a.title.length > b.title.length;\n    const diff = a.title.toLowerCase().localeCompare(b.title.toLowerCase());\n\n    if (order === ASC) {\n        return diff;\n    }\n\n    return -1 * diff;\n}\n\n\nfunction Board(props) {\n  // const [showDropdown, setShowDropdown] = useState(false);\n  const sortPriority = props.sortPriority;\n\n  // console.log(props.board?.cards?.sort(sortByTitle));   \n\n  if(!sortPriority){\n    props.board?.cards?.sort(sortByTitle)\n  }\n  else{\n    props.board?.cards?.sort(sortByPriority)\n  }\n\n  return (\n    <div className=\"board\">\n      <div className=\"board_header\">\n        <p className=\"board_header_title\">\n          {props.board?.title}\n          <span>{props.board?.cards?.length || 0}</span>\n        </p>\n        {/* <div\n          className=\"board_header_title_more\"\n          onClick={() => setShowDropdown(true)}\n        >\n          <MoreHorizontal />\n          {showDropdown && (\n            <Dropdown\n              class=\"board_dropdown\"\n              onClose={() => setShowDropdown(false)}\n            >\n              <p onClick={() => props.removeBoard()}>Delete Board</p>\n            </Dropdown>\n          )}\n        </div> */}\n      </div>\n      <div className=\"board_cards custom-scroll\">\n        {props.board?.cards?.map((item) => (\n          <Card \n            key={item.id}\n            desc={item.desc}\n            card={item}\n            boardId={props.board.id}\n            removeCard={props.removeCard}\n            dragEntered={props.dragEntered}\n            dragEnded={props.dragEnded}\n            updateCard={props.updateCard}\n          />\n          \n        ))}\n        <Editable\n          text=\"+ Add Card\"\n          placeholder=\"Enter Card Title\"\n          displayClass=\"board_add-card\"\n          editClass=\"board_add-card_edit\"\n          onSubmit={(value) => props.addCard(props.board?.id, value)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","/home/saransh/QuickSell_B20132/src/Components/Card/Card.js",["38"],"import React, { useState } from \"react\";\n\nimport \"./Card.css\";\nimport CardInfo from \"./CardInfo/CardInfo\";\n\nfunction Card(props) {\n  const [showModal, setShowModal] = useState(false);\n\n  const { id, title,desc,tag,priority} = props.card;\n  return (\n    <>\n      {showModal && (\n        <CardInfo\n          onClose={() => setShowModal(false)}\n          card={props.card}\n          boardId={props.boardId}\n          updateCard={props.updateCard}\n        />\n      )}\n      <div\n        className=\"card\"\n        draggable\n        onDragEnd={() => props.dragEnded(props.boardId, id)}\n        onDragEnter={() => props.dragEntered(props.boardId, id)}\n      >\n\n        <div className=\"card_title\">{title}</div>\n        <div className=\"card_desc\">{desc}</div>\n        <div className=\"card_tag\">\n          <div className=\"feature_bullet\"></div>\n          <div className=\"card_tag\">Feature Request</div>\n        </div>\n        <div className=\"card_tag\">Priority : {priority}</div>\n\n\n              \n      </div>\n    </>\n  );\n}\n\nexport default Card;\n","/home/saransh/QuickSell_B20132/src/Components/Card/CardInfo/CardInfo.js",[],{"ruleId":"39","severity":1,"message":"40","line":9,"column":10,"nodeType":"41","messageId":"42","endLine":9,"endColumn":14},{"ruleId":"43","severity":1,"message":"44","line":18,"column":6,"nodeType":"45","endLine":18,"endColumn":8,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":34,"column":5,"nodeType":"49","messageId":"50","endLine":97,"endColumn":6},{"ruleId":"51","severity":1,"message":"52","line":35,"column":41,"nodeType":"53","messageId":"54","endLine":35,"endColumn":43},{"ruleId":"55","severity":1,"message":"56","line":39,"column":20,"nodeType":"57","messageId":"58","endLine":39,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":56,"column":20,"nodeType":"57","messageId":"58","endLine":56,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":73,"column":20,"nodeType":"57","messageId":"58","endLine":73,"endColumn":22},{"ruleId":"55","severity":1,"message":"59","line":102,"column":56,"nodeType":"57","messageId":"58","endLine":102,"endColumn":58},{"ruleId":"55","severity":1,"message":"56","line":19,"column":22,"nodeType":"57","messageId":"58","endLine":19,"endColumn":24},{"ruleId":"39","severity":1,"message":"60","line":9,"column":26,"nodeType":"41","messageId":"42","endLine":9,"endColumn":29},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleData'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'tag' is assigned a value but never used.",{"desc":"62","fix":"63"},"Update the dependencies array to be: [handleData]",{"range":"64","text":"65"},[625,627],"[handleData]"]