{"ast":null,"code":"var _jsxFileName = \"/home/saransh/Kanban/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./Components/Board/Board\";\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n  const statusMap = {\n    \"Todo\": 0,\n    \"In progress\": 1,\n    \"Backlog\": 2,\n    \"Cancelled\": 4\n  };\n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch('https://api.quicksell.co/v1/internal/frontend-assignment').then(response => response.json()).then(responseData => handleData(responseData)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleData = responseData => {\n    console.log(responseData);\n    setData(responseData);\n    {\n      responseData.tickets.map(ticket => {\n        let idd = statusMap[ticket.status];\n        addCardHandler(idd, ticket.id, ticket.title, ticket.userId, ticket.status, ticket.tag[0], ticket.priority);\n      });\n    }\n  };\n\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: \"Todo\",\n    cards: []\n  }, {\n    id: 1,\n    title: \"In Progress\",\n    cards: []\n  }, {\n    id: 2,\n    title: \"Done\",\n    cards: []\n  }, {\n    id: 3,\n    title: \"Cancelled\",\n    cards: []\n  }]);\n  console.log(data);\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\"\n  });\n\n  const addboardHandler = name => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: []\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = id => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee, descc, user, status, tag, priority) => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    console.log(descc);\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title: titlee,\n      desc: descc,\n      user,\n      status,\n      tag,\n      priority\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    var _boards$s_boardIndex, _boards$s_boardIndex$, _boards$t_boardIndex, _boards$t_boardIndex$;\n\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex(item => item.id === bid);\n    if (s_boardIndex < 0) return;\n    s_cardIndex = (_boards$s_boardIndex = boards[s_boardIndex]) === null || _boards$s_boardIndex === void 0 ? void 0 : (_boards$s_boardIndex$ = _boards$s_boardIndex.cards) === null || _boards$s_boardIndex$ === void 0 ? void 0 : _boards$s_boardIndex$.findIndex(item => item.id === cid);\n    if (s_cardIndex < 0) return;\n    t_boardIndex = boards.findIndex(item => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n    t_cardIndex = (_boards$t_boardIndex = boards[t_boardIndex]) === null || _boards$t_boardIndex === void 0 ? void 0 : (_boards$t_boardIndex$ = _boards$t_boardIndex.cards) === null || _boards$t_boardIndex$ === void 0 ? void 0 : _boards$t_boardIndex$.findIndex(item => item.id === targetCard.cid);\n    if (t_cardIndex < 0) return;\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n    setTargetCard({\n      bid: \"\",\n      cid: \"\"\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    tempBoards[index].cards[cardIndex] = card;\n    setBoards(tempBoards);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: \"setSortPriority(true)\",\n        children: \" sort by priority \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: \"setSortPriority(false)\",\n        children: \" sort by name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_boards_container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app_boards\",\n        children: [boards.map(item => /*#__PURE__*/_jsxDEV(Board, {\n          board: item,\n          addCard: addCardHandler,\n          removeBoard: () => removeBoard(item.id),\n          removeCard: removeCard,\n          dragEnded: dragEnded,\n          dragEntered: dragEntered,\n          updateCard: updateCard,\n          sortPriority: sortPriority\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app_boards_last\",\n          children: /*#__PURE__*/_jsxDEV(Editable, {\n            displayClass: \"app_boards_add-board\",\n            editClass: \"app_boards_add-board_edit\",\n            placeholder: \"Enter Board Name\",\n            text: \"Add Board\",\n            buttonText: \"Add Board\",\n            onSubmit: addboardHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+rmVmXsrJEY7v/Pa6d64cMCtgmg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/saransh/Kanban/src/App.js"],"names":["React","useEffect","useState","Board","Editable","App","data","setData","sortPriority","setSortPriority","statusMap","fetch","then","response","json","responseData","handleData","catch","error","console","log","tickets","map","ticket","idd","status","addCardHandler","id","title","userId","tag","priority","boards","setBoards","cards","targetCard","setTargetCard","bid","cid","addboardHandler","name","tempBoards","push","Date","now","Math","random","removeBoard","index","findIndex","item","splice","titlee","descc","user","desc","removeCard","cardIndex","dragEnded","s_boardIndex","s_cardIndex","t_boardIndex","t_cardIndex","sourceCard","dragEntered","updateCard","card","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Board from \"./Components/Board/Board\";\n\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\n\n\n\n\nfunction App() {\n  \n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n\n  const statusMap = {\n    \"Todo\" : 0,\n    \"In progress\" : 1,\n    \"Backlog\":2,\n    \"Cancelled\" : 4\n  };\n  \n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch('https://api.quicksell.co/v1/internal/frontend-assignment')\n    .then((response) => response.json())\n    .then((responseData) => handleData(responseData))\n    .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleData = (responseData) => {\n    console.log(responseData);\n    setData(responseData);\n    {responseData.tickets.map((ticket)=>{\n        let idd = statusMap[ticket.status];\n        addCardHandler(idd,ticket.id,ticket.title, ticket.userId, ticket.status, ticket.tag[0],ticket.priority);\n    })}\n  }\n\n  const [boards, setBoards] = useState(\n    [\n      {\n        id:0,\n        title:\"Todo\",\n        cards:[],\n      },\n      {\n        id:1,\n        title:\"In Progress\",\n        cards:[],\n      },\n      {\n        id:2,\n        title:\"Done\",\n        cards:[],\n      },\n      {\n        id:3,\n        title:\"Cancelled\",\n        cards:[],\n      },\n    ]\n  );\n\n  console.log(data);\n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = (id) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee,descc, user, status ,tag,priority) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n    console.log(descc);\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title : titlee,\n      desc : descc,\n      user,\n      status,\n      tag,\n      priority\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) return;\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    tempBoards[index].cards[cardIndex] = card;\n\n    setBoards(tempBoards);\n  };\n\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n        <h1>Kanban Board</h1>\n        <button onclick=\"setSortPriority(true)\"> sort by priority </button>\n        <button onclick=\"setSortPriority(false)\"> sort by name </button>\n      </div>\n      <div className=\"app_boards_container\">\n        <div className=\"app_boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              dragEnded={dragEnded}\n              dragEntered={dragEntered}\n              updateCard={updateCard}\n              sortPriority={sortPriority}\n            />\n          ))}\n          <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}