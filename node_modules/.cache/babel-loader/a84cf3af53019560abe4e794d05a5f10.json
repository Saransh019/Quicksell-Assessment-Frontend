{"ast":null,"code":"var _jsxFileName = \"/home/saransh/Kanban/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./Components/Board/Board\";\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n  const statusMap = {\n    \"Todo\": 0,\n    \"In progress\": 1,\n    \"Backlog\": 2,\n    \"Cancelled\": 4\n  };\n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch('https://api.quicksell.co/v1/internal/frontend-assignment').then(response => response.json()).then(responseData => handleData(responseData)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const [user_board, set_user_board] = useState([]);\n  const [priority_board, set_priority_board] = useState([]);\n  const [status_board, set_status_board] = useState([]);\n\n  const handleData = responseData => {\n    console.log(responseData);\n    setData(responseData);\n    {\n      responseData.tickets.map(ticket => {\n        if (ticket.userId in user_board) {\n          addCardss(user_board[ticket.userId], user_board, ticket);\n        } else {\n          const tempBoards = [...user_board];\n          tempBoards.push({\n            id: Date.now() + Math.random() * 2,\n            title: ticket.userId,\n            cards: []\n          });\n          set_user_board(tempBoards);\n          addCardss(user_board[ticket.userId], user_board, ticket); // console.log(\"aerear\");\n        }\n\n        if (ticket.status in status_board) {\n          addCardss(status_board[ticket.status], status_board, ticket);\n        } else {\n          const tempBoards = [...status_board];\n          tempBoards.push({\n            id: Date.now() + Math.random() * 2,\n            title: ticket.status,\n            cards: []\n          });\n          set_status_board(tempBoards);\n          addCardss(status_board[ticket.status], status_board, ticket);\n        }\n\n        if (ticket.priority in priority_board) {\n          addCardss(priority_board[ticket.priority], priority_board, ticket);\n        } else {\n          const tempBoards = [...priority_board];\n          tempBoards.push({\n            id: Date.now() + Math.random() * 2,\n            title: ticket.priority,\n            cards: []\n          });\n          console.log(tempBoards);\n          set_priority_board(tempBoards);\n          addCardss(priority_board[ticket.priority], priority_board, ticket);\n        }\n      });\n    }\n  };\n\n  const addCardss = (id, boards, card, set_board) => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    console.log(\"reached\"); // console.log(...card, \"erere\");\n\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      ...card\n    });\n    set_board(tempBoards);\n  };\n\n  const [boards, setBoards] = useState([{\n    id: 0,\n    title: \"Todo\",\n    cards: []\n  }, {\n    id: 1,\n    title: \"In Progress\",\n    cards: []\n  }, {\n    id: 2,\n    title: \"Done\",\n    cards: []\n  }, {\n    id: 3,\n    title: \"Cancelled\",\n    cards: []\n  }]);\n  console.log(data);\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\"\n  });\n\n  const addboardHandler = name => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: []\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = id => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee, descc, user, status, tag, priority) => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return; // console.log(descc);\n\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title: titlee,\n      desc: descc,\n      user,\n      status,\n      tag,\n      priority\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    var _boards$s_boardIndex, _boards$s_boardIndex$, _boards$t_boardIndex, _boards$t_boardIndex$;\n\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex(item => item.id === bid);\n    if (s_boardIndex < 0) return;\n    s_cardIndex = (_boards$s_boardIndex = boards[s_boardIndex]) === null || _boards$s_boardIndex === void 0 ? void 0 : (_boards$s_boardIndex$ = _boards$s_boardIndex.cards) === null || _boards$s_boardIndex$ === void 0 ? void 0 : _boards$s_boardIndex$.findIndex(item => item.id === cid);\n    if (s_cardIndex < 0) return;\n    t_boardIndex = boards.findIndex(item => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n    t_cardIndex = (_boards$t_boardIndex = boards[t_boardIndex]) === null || _boards$t_boardIndex === void 0 ? void 0 : (_boards$t_boardIndex$ = _boards$t_boardIndex.cards) === null || _boards$t_boardIndex$ === void 0 ? void 0 : _boards$t_boardIndex$.findIndex(item => item.id === targetCard.cid);\n    if (t_cardIndex < 0) return;\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n    setTargetCard({\n      bid: \"\",\n      cid: \"\"\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    tempBoards[index].cards[cardIndex] = card;\n    setBoards(tempBoards);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  function abbc() {\n    // console.log(\"fsadfad\");\n    setSortPriority(true);\n  }\n\n  function bbbc() {\n    // console.log(\"dsffsfs\");\n    setSortPriority(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: abbc,\n        children: \" sort by priority \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bbbc,\n        children: \" sort by name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_boards_container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app_boards\",\n        children: [boards.map(item => /*#__PURE__*/_jsxDEV(Board, {\n          board: item,\n          addCard: addCardHandler,\n          removeBoard: () => removeBoard(item.id),\n          removeCard: removeCard,\n          dragEnded: dragEnded,\n          dragEntered: dragEntered,\n          updateCard: updateCard,\n          sortPriority: sortPriority\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app_boards_last\",\n          children: /*#__PURE__*/_jsxDEV(Editable, {\n            displayClass: \"app_boards_add-board\",\n            editClass: \"app_boards_add-board_edit\",\n            placeholder: \"Enter Board Name\",\n            text: \"Add Board\",\n            buttonText: \"Add Board\",\n            onSubmit: addboardHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gnh0Lkk6TXr1HUSrVGM55makN5I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/saransh/Kanban/src/App.js"],"names":["React","useEffect","useState","Board","Editable","App","data","setData","sortPriority","setSortPriority","statusMap","fetch","then","response","json","responseData","handleData","catch","error","console","user_board","set_user_board","priority_board","set_priority_board","status_board","set_status_board","log","tickets","map","ticket","userId","addCardss","tempBoards","push","id","Date","now","Math","random","title","cards","status","priority","boards","card","set_board","index","findIndex","item","setBoards","targetCard","setTargetCard","bid","cid","addboardHandler","name","removeBoard","splice","addCardHandler","titlee","descc","user","tag","desc","removeCard","cardIndex","dragEnded","s_boardIndex","s_cardIndex","t_boardIndex","t_cardIndex","sourceCard","dragEntered","updateCard","localStorage","setItem","JSON","stringify","abbc","bbbc"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Board from \"./Components/Board/Board\";\n\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\n\n\n\n\nfunction App() {\n  \n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n\n  const statusMap = {\n    \"Todo\" : 0,\n    \"In progress\" : 1,\n    \"Backlog\":2,\n    \"Cancelled\" : 4\n  };\n  \n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch('https://api.quicksell.co/v1/internal/frontend-assignment')\n    .then((response) => response.json())\n    .then((responseData) => handleData(responseData))\n    .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  const [user_board, set_user_board] = useState([]);\n  const [priority_board, set_priority_board] = useState([]);\n  const [status_board, set_status_board] = useState([]);\n\n  const handleData = (responseData) => {\n    console.log(responseData);\n    setData(responseData);\n    {responseData.tickets.map((ticket)=>{\n      if(ticket.userId in user_board){\n        addCardss(user_board[ticket.userId], user_board, ticket);\n      }\n      else{\n        const tempBoards = [...user_board];\n        tempBoards.push({\n          id: Date.now() + Math.random() * 2,\n          title: ticket.userId,\n          cards: [],\n        });\n        set_user_board(tempBoards);\n        addCardss(user_board[ticket.userId], user_board, ticket);\n        // console.log(\"aerear\");\n\n      }\n      if(ticket.status in status_board){\n        addCardss(status_board[ticket.status], status_board, ticket);\n      }\n      else{\n        const tempBoards = [...status_board];\n        tempBoards.push({\n          id: Date.now() + Math.random() * 2,\n          title: ticket.status,\n          cards: [],\n        });\n        set_status_board(tempBoards);\n        addCardss(status_board[ticket.status], status_board, ticket);\n\n      }\n      if(ticket.priority in priority_board){\n        addCardss(priority_board[ticket.priority], priority_board, ticket);\n      }\n      else{\n        const tempBoards = [...priority_board];\n        tempBoards.push({\n          id: Date.now() + Math.random() * 2,\n          title: ticket.priority,\n          cards: [],\n        });\n        console.log(tempBoards);\n        set_priority_board(tempBoards);\n        addCardss(priority_board[ticket.priority], priority_board, ticket);\n\n      }\n\n  })}\n\n  }\n\n  const addCardss = (id, boards, card,set_board) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    console.log(\"reached\");\n    // console.log(...card, \"erere\");\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      ...card\n    });\n    set_board(tempBoards);\n  };\n\n\n\n  const [boards, setBoards] = useState(\n    [\n      {\n        id:0,\n        title:\"Todo\",\n        cards:[],\n      },\n      {\n        id:1,\n        title:\"In Progress\",\n        cards:[],\n      },\n      {\n        id:2,\n        title:\"Done\",\n        cards:[],\n      },\n      {\n        id:3,\n        title:\"Cancelled\",\n        cards:[],\n      },\n    ]\n  );\n\n  console.log(data);\n\n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = (id) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee,descc, user, status ,tag,priority) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n    // console.log(descc);\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title : titlee,\n      desc : descc,\n      user,\n      status,\n      tag,\n      priority\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) return;\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    tempBoards[index].cards[cardIndex] = card;\n\n    setBoards(tempBoards);\n  };\n\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  function abbc(){\n    // console.log(\"fsadfad\");\n    setSortPriority(true);\n  }\n  function bbbc(){\n    // console.log(\"dsffsfs\");\n    setSortPriority(false);\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n        <h1>Kanban Board</h1>\n        <button onClick={abbc}> sort by priority </button>\n        <button onClick={bbbc}> sort by name </button>\n        {/* <button onClick={setSortPriority(false)}> sort by name </button> */}\n      </div>\n      <div className=\"app_boards_container\">\n        <div className=\"app_boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              dragEnded={dragEnded}\n              dragEntered={dragEntered}\n              updateCard={updateCard}\n              sortPriority={sortPriority}\n            />\n          ))}\n          <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}