{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import {\n//   Calendar,\n//   CheckSquare,\n//   List,\n//   Tag,\n//   Trash,\n//   Type,\n//   X,\n// } from \"react-feather\";\n// import Modal from \"../../Modal/Modal\";\n// import Editable from \"../../Editabled/Editable\";\n// import \"./CardInfo.css\";\n// function CardInfo(props) {\n//   const colors = [\n//     \"#a8193d\",\n//     \"#4fcc25\",\n//     \"#1ebffa\",\n//     \"#8da377\",\n//     \"#9975bd\",\n//     \"#cf61a1\",\n//     \"#240959\",\n//   ];\n//   const [selectedColor, setSelectedColor] = useState();\n//   const [values, setValues] = useState({\n//     ...props.card,\n//   });\n//   const updateTitle = (value) => {\n//     setValues({ ...values, title: value });\n//   };\n//   const updateDesc = (value) => {\n//     setValues({ ...values, desc: value });\n//   };\n//   const addLabel = (label) => {\n//     const index = values.labels.findIndex((item) => item.text === label.text);\n//     if (index > -1) return;\n//     setSelectedColor(\"\");\n//     setValues({\n//       ...values,\n//       labels: [...values.labels, label],\n//     });\n//   };\n//   const removeLabel = (label) => {\n//     const tempLabels = values.labels.filter((item) => item.text !== label.text);\n//     setValues({\n//       ...values,\n//       labels: tempLabels,\n//     });\n//   };\n//   const addTask = (value) => {\n//     const task = {\n//       id: Date.now() + Math.random() * 2,\n//       completed: false,\n//       text: value,\n//     };\n//     setValues({\n//       ...values,\n//       tasks: [...values.tasks, task],\n//     });\n//   };\n//   const removeTask = (id) => {\n//     const tasks = [...values.tasks];\n//     const tempTasks = tasks.filter((item) => item.id !== id);\n//     setValues({\n//       ...values,\n//       tasks: tempTasks,\n//     });\n//   };\n//   const updateTask = (id, value) => {\n//     const tasks = [...values.tasks];\n//     const index = tasks.findIndex((item) => item.id === id);\n//     if (index < 0) return;\n//     tasks[index].completed = value;\n//     setValues({\n//       ...values,\n//       tasks,\n//     });\n//   };\n//   const calculatePercent = () => {\n//     if (!values.tasks?.length) return 0;\n//     const completed = values.tasks?.filter((item) => item.completed)?.length;\n//     return (completed / values.tasks?.length) * 100;\n//   };\n//   const updateDate = (date) => {\n//     if (!date) return;\n//     setValues({\n//       ...values,\n//       date,\n//     });\n//   };\n//   useEffect(() => {\n//     if (props.updateCard) props.updateCard(props.boardId, values.id, values);\n//   }, [values]);\n//   return (\n//     <Modal onClose={props.onClose}>\n//       <div className=\"cardinfo\">\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Type />\n//             <p>Title</p>\n//           </div>\n//           <Editable\n//             defaultValue={values.title}\n//             text={values.title}\n//             placeholder=\"Enter Title\"\n//             onSubmit={updateTitle}\n//           />\n//         </div>\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <List />\n//             <p>Description</p>\n//           </div>\n//           <Editable\n//             defaultValue={values.desc}\n//             text={values.desc || \"Add a Description\"}\n//             placeholder=\"Enter description\"\n//             onSubmit={updateDesc}\n//           />\n//         </div>\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Calendar />\n//             <p>Date</p>\n//           </div>\n//           <input\n//             type=\"date\"\n//             defaultValue={values.date}\n//             min={new Date().toISOString().substr(0, 10)}\n//             onChange={(event) => updateDate(event.target.value)}\n//           />\n//         </div>\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Tag />\n//             <p>Labels</p>\n//           </div>\n//           <div className=\"cardinfo_box_labels\">\n//             {values.labels?.map((item, index) => (\n//               <label\n//                 key={index}\n//                 style={{ backgroundColor: item.color, color: \"#fff\" }}\n//               >\n//                 {item.text}\n//                 <X onClick={() => removeLabel(item)} />\n//               </label>\n//             ))}\n//           </div>\n//           <ul>\n//             {colors.map((item, index) => (\n//               <li\n//                 key={index + item}\n//                 style={{ backgroundColor: item }}\n//                 className={selectedColor === item ? \"li_active\" : \"\"}\n//                 onClick={() => setSelectedColor(item)}\n//               />\n//             ))}\n//           </ul>\n//           <Editable\n//             text=\"Add Label\"\n//             placeholder=\"Enter label text\"\n//             onSubmit={(value) =>\n//               addLabel({ color: selectedColor, text: value })\n//             }\n//           />\n//         </div>\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <CheckSquare />\n//             <p>Tasks</p>\n//           </div>\n//           <div className=\"cardinfo_box_progress-bar\">\n//             <div\n//               className=\"cardinfo_box_progress\"\n//               style={{\n//                 width: `${calculatePercent()}%`,\n//                 backgroundColor: calculatePercent() === 100 ? \"limegreen\" : \"\",\n//               }}\n//             />\n//           </div>\n//           <div className=\"cardinfo_box_task_list\">\n//             {values.tasks?.map((item) => (\n//               <div key={item.id} className=\"cardinfo_box_task_checkbox\">\n//                 <input\n//                   type=\"checkbox\"\n//                   defaultChecked={item.completed}\n//                   onChange={(event) =>\n//                     updateTask(item.id, event.target.checked)\n//                   }\n//                 />\n//                 <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\n//                 <Trash onClick={() => removeTask(item.id)} />\n//               </div>\n//             ))}\n//           </div>\n//           <Editable\n//             text={\"Add a Task\"}\n//             placeholder=\"Enter task\"\n//             onSubmit={addTask}\n//           />\n//         </div>\n//       </div>\n//     </Modal>\n//   );\n// }\n// export default CardInfo;","map":{"version":3,"sources":["/home/saransh/Kanban/src/Components/Card/CardInfo/CardInfo.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import {\n//   Calendar,\n//   CheckSquare,\n//   List,\n//   Tag,\n//   Trash,\n//   Type,\n//   X,\n// } from \"react-feather\";\n\n// import Modal from \"../../Modal/Modal\";\n// import Editable from \"../../Editabled/Editable\";\n\n// import \"./CardInfo.css\";\n\n// function CardInfo(props) {\n//   const colors = [\n//     \"#a8193d\",\n//     \"#4fcc25\",\n//     \"#1ebffa\",\n//     \"#8da377\",\n//     \"#9975bd\",\n//     \"#cf61a1\",\n//     \"#240959\",\n//   ];\n\n//   const [selectedColor, setSelectedColor] = useState();\n//   const [values, setValues] = useState({\n//     ...props.card,\n//   });\n\n//   const updateTitle = (value) => {\n//     setValues({ ...values, title: value });\n//   };\n\n//   const updateDesc = (value) => {\n//     setValues({ ...values, desc: value });\n//   };\n\n//   const addLabel = (label) => {\n//     const index = values.labels.findIndex((item) => item.text === label.text);\n//     if (index > -1) return;\n\n//     setSelectedColor(\"\");\n//     setValues({\n//       ...values,\n//       labels: [...values.labels, label],\n//     });\n//   };\n\n//   const removeLabel = (label) => {\n//     const tempLabels = values.labels.filter((item) => item.text !== label.text);\n\n//     setValues({\n//       ...values,\n//       labels: tempLabels,\n//     });\n//   };\n\n//   const addTask = (value) => {\n//     const task = {\n//       id: Date.now() + Math.random() * 2,\n//       completed: false,\n//       text: value,\n//     };\n//     setValues({\n//       ...values,\n//       tasks: [...values.tasks, task],\n//     });\n//   };\n\n//   const removeTask = (id) => {\n//     const tasks = [...values.tasks];\n\n//     const tempTasks = tasks.filter((item) => item.id !== id);\n//     setValues({\n//       ...values,\n//       tasks: tempTasks,\n//     });\n//   };\n\n//   const updateTask = (id, value) => {\n//     const tasks = [...values.tasks];\n\n//     const index = tasks.findIndex((item) => item.id === id);\n//     if (index < 0) return;\n\n//     tasks[index].completed = value;\n\n//     setValues({\n//       ...values,\n//       tasks,\n//     });\n//   };\n\n//   const calculatePercent = () => {\n//     if (!values.tasks?.length) return 0;\n//     const completed = values.tasks?.filter((item) => item.completed)?.length;\n//     return (completed / values.tasks?.length) * 100;\n//   };\n\n//   const updateDate = (date) => {\n//     if (!date) return;\n\n//     setValues({\n//       ...values,\n//       date,\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (props.updateCard) props.updateCard(props.boardId, values.id, values);\n//   }, [values]);\n\n//   return (\n//     <Modal onClose={props.onClose}>\n//       <div className=\"cardinfo\">\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Type />\n//             <p>Title</p>\n//           </div>\n//           <Editable\n//             defaultValue={values.title}\n//             text={values.title}\n//             placeholder=\"Enter Title\"\n//             onSubmit={updateTitle}\n//           />\n//         </div>\n\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <List />\n//             <p>Description</p>\n//           </div>\n//           <Editable\n//             defaultValue={values.desc}\n//             text={values.desc || \"Add a Description\"}\n//             placeholder=\"Enter description\"\n//             onSubmit={updateDesc}\n//           />\n//         </div>\n\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Calendar />\n//             <p>Date</p>\n//           </div>\n//           <input\n//             type=\"date\"\n//             defaultValue={values.date}\n//             min={new Date().toISOString().substr(0, 10)}\n//             onChange={(event) => updateDate(event.target.value)}\n//           />\n//         </div>\n\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <Tag />\n//             <p>Labels</p>\n//           </div>\n//           <div className=\"cardinfo_box_labels\">\n//             {values.labels?.map((item, index) => (\n//               <label\n//                 key={index}\n//                 style={{ backgroundColor: item.color, color: \"#fff\" }}\n//               >\n//                 {item.text}\n//                 <X onClick={() => removeLabel(item)} />\n//               </label>\n//             ))}\n//           </div>\n//           <ul>\n//             {colors.map((item, index) => (\n//               <li\n//                 key={index + item}\n//                 style={{ backgroundColor: item }}\n//                 className={selectedColor === item ? \"li_active\" : \"\"}\n//                 onClick={() => setSelectedColor(item)}\n//               />\n//             ))}\n//           </ul>\n//           <Editable\n//             text=\"Add Label\"\n//             placeholder=\"Enter label text\"\n//             onSubmit={(value) =>\n//               addLabel({ color: selectedColor, text: value })\n//             }\n//           />\n//         </div>\n\n//         <div className=\"cardinfo_box\">\n//           <div className=\"cardinfo_box_title\">\n//             <CheckSquare />\n//             <p>Tasks</p>\n//           </div>\n//           <div className=\"cardinfo_box_progress-bar\">\n//             <div\n//               className=\"cardinfo_box_progress\"\n//               style={{\n//                 width: `${calculatePercent()}%`,\n//                 backgroundColor: calculatePercent() === 100 ? \"limegreen\" : \"\",\n//               }}\n//             />\n//           </div>\n//           <div className=\"cardinfo_box_task_list\">\n//             {values.tasks?.map((item) => (\n//               <div key={item.id} className=\"cardinfo_box_task_checkbox\">\n//                 <input\n//                   type=\"checkbox\"\n//                   defaultChecked={item.completed}\n//                   onChange={(event) =>\n//                     updateTask(item.id, event.target.checked)\n//                   }\n//                 />\n//                 <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\n//                 <Trash onClick={() => removeTask(item.id)} />\n//               </div>\n//             ))}\n//           </div>\n//           <Editable\n//             text={\"Add a Task\"}\n//             placeholder=\"Enter task\"\n//             onSubmit={addTask}\n//           />\n//         </div>\n//       </div>\n//     </Modal>\n//   );\n// }\n\n// export default CardInfo;\n"]},"metadata":{},"sourceType":"module"}