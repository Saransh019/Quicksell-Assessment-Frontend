{"ast":null,"code":"var _jsxFileName = \"/home/saransh/Kanban/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./Components/Board/Board\";\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n  const statusMap = {\n    Todo: 0,\n    \"In progress\": 1,\n    Backlog: 2,\n    Cancelled: 4\n  };\n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch(\"https://api.quicksell.co/v1/internal/frontend-assignment\").then(response => response.json()).then(responseData => handleData(responseData)).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  const user_map = {};\n  const status_map = {};\n  const priority_map = {};\n  const [user_board, set_user_board] = useState([]);\n  const [priority_board, set_priority_board] = useState([]);\n  const [status_board, set_status_board] = useState([]);\n\n  const handleData = responseData => {\n    console.log(responseData);\n    setData(responseData);\n    {\n      responseData.tickets.map(ticket => {\n        var uindex = user_board.findIndex(item => item.title === ticket.userId);\n\n        if (uindex != -1) {\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        } else {\n          let tempBoards = user_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.userId,\n            cards: []\n          });\n          set_user_board(tempBoards);\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        }\n\n        var sindex = status_board.findIndex(item => item.title === ticket.status);\n\n        if (sindex != -1) {\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        } else {\n          let tempBoards = status_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.status,\n            cards: []\n          });\n          set_status_board(tempBoards);\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        }\n\n        var pindex = priority_board.findIndex(item => item.title === ticket.priority);\n\n        if (pindex != -1) {\n          addCardss(ticket.priority, priority_board, ticket, set_priority_board);\n        } else {\n          let tempBoards = priority_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.priority,\n            cards: []\n          });\n          set_priority_board(tempBoards);\n          addCardss(ticket.priority, priority_board, ticket, set_priority_board);\n        }\n      });\n    }\n  };\n\n  const addCardss = (name, board, card, set_board) => {\n    console.log(\"red\", name, board, card);\n    const index = board.findIndex(item => item.title == name);\n    console.log(index);\n    if (index < 0) return;\n    let tempBoards = [...board];\n    console.log(\"reached\"); // console.log(...card, \"erere\");\n\n    const obj = {\n      id: Date.now() + Math.random() * 2,\n      title: card.id,\n      desc: card.title,\n      user: card.userId,\n      status: card.status,\n      tag: card.tag[0],\n      priority: card.priority\n    };\n    console.log(\"onject\", obj);\n    tempBoards[index].cards.push(obj);\n    set_board(tempBoards);\n  };\n\n  const [boards, setBoards] = useState(status_board); // console.log(data);\n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\"\n  });\n\n  const addboardHandler = name => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: []\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = id => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee, descc, user, status, tag, priority) => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return; // console.log(descc);\n\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title: titlee,\n      desc: descc,\n      user,\n      status,\n      tag,\n      priority\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    var _boards$s_boardIndex, _boards$s_boardIndex$, _boards$t_boardIndex, _boards$t_boardIndex$;\n\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex(item => item.id === bid);\n    if (s_boardIndex < 0) return;\n    s_cardIndex = (_boards$s_boardIndex = boards[s_boardIndex]) === null || _boards$s_boardIndex === void 0 ? void 0 : (_boards$s_boardIndex$ = _boards$s_boardIndex.cards) === null || _boards$s_boardIndex$ === void 0 ? void 0 : _boards$s_boardIndex$.findIndex(item => item.id === cid);\n    if (s_cardIndex < 0) return;\n    t_boardIndex = boards.findIndex(item => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n    t_cardIndex = (_boards$t_boardIndex = boards[t_boardIndex]) === null || _boards$t_boardIndex === void 0 ? void 0 : (_boards$t_boardIndex$ = _boards$t_boardIndex.cards) === null || _boards$t_boardIndex$ === void 0 ? void 0 : _boards$t_boardIndex$.findIndex(item => item.id === targetCard.cid);\n    if (t_cardIndex < 0) return;\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n    setTargetCard({\n      bid: \"\",\n      cid: \"\"\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    tempBoards[index].cards[cardIndex] = card;\n    setBoards(tempBoards);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  function abbc() {\n    // console.log(\"fsadfad\");\n    setSortPriority(true);\n  }\n\n  function bbbc() {\n    // console.log(\"dsffsfs\");\n    setSortPriority(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: abbc,\n        children: \" sort by priority \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bbbc,\n        children: \" sort by name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"language\",\n        id: \"language\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Grouping\",\n          disabled: true,\n          selected: true,\n          children: \"Grouping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"User\",\n          onClick: setBoards(user_board),\n          children: \"User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Status\",\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Priority\",\n          children: \"Priority\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_boards_container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app_boards\",\n        children: [boards.map(item => /*#__PURE__*/_jsxDEV(Board, {\n          board: item,\n          addCard: addCardHandler,\n          removeBoard: () => removeBoard(item.id),\n          removeCard: removeCard,\n          dragEnded: dragEnded,\n          dragEntered: dragEntered,\n          updateCard: updateCard,\n          sortPriority: sortPriority\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app_boards_last\",\n          children: /*#__PURE__*/_jsxDEV(Editable, {\n            displayClass: \"app_boards_add-board\",\n            editClass: \"app_boards_add-board_edit\",\n            placeholder: \"Enter Board Name\",\n            text: \"Add Board\",\n            buttonText: \"Add Board\",\n            onSubmit: addboardHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XZ2g6rIyOdXaJ++Nv23AFgz5ggs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/saransh/Kanban/src/App.js"],"names":["React","useEffect","useState","Board","Editable","App","data","setData","sortPriority","setSortPriority","statusMap","Todo","Backlog","Cancelled","fetch","then","response","json","responseData","handleData","catch","error","console","user_map","status_map","priority_map","user_board","set_user_board","priority_board","set_priority_board","status_board","set_status_board","log","tickets","map","ticket","uindex","findIndex","item","title","userId","addCardss","tempBoards","idd","Date","now","Math","random","push","id","cards","sindex","status","pindex","priority","name","board","card","set_board","index","obj","desc","user","tag","boards","setBoards","targetCard","setTargetCard","bid","cid","addboardHandler","removeBoard","splice","addCardHandler","titlee","descc","removeCard","cardIndex","dragEnded","s_boardIndex","s_cardIndex","t_boardIndex","t_cardIndex","sourceCard","dragEntered","updateCard","localStorage","setItem","JSON","stringify","abbc","bbbc"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Board from \"./Components/Board/Board\";\n\nimport \"./App.css\";\nimport Editable from \"./Components/Editabled/Editable\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [sortPriority, setSortPriority] = useState(false);\n\n  const statusMap = {\n    Todo: 0,\n    \"In progress\": 1,\n    Backlog: 2,\n    Cancelled: 4,\n  };\n\n  useEffect(() => {\n    // Fetch data from the API and store it in the 'data' state\n    fetch(\"https://api.quicksell.co/v1/internal/frontend-assignment\")\n      .then((response) => response.json())\n      .then((responseData) => handleData(responseData))\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  const user_map = {};\n  const status_map = {};\n  const priority_map = {};\n  const [user_board, set_user_board] = useState([]);\n  const [priority_board, set_priority_board] = useState([]);\n  const [status_board, set_status_board] = useState([]);\n\n  const handleData = (responseData) => {\n    console.log(responseData);\n    setData(responseData);\n    {\n      responseData.tickets.map((ticket) => {\n\n        var uindex = user_board.findIndex(\n          (item) => item.title === ticket.userId\n        );\n        if (uindex != -1) {\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        } else {\n          let tempBoards = user_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.userId,\n            cards: [],\n          });\n          set_user_board(tempBoards);\n          addCardss(ticket.userId, user_board, ticket, set_user_board);\n        }\n\n        var sindex = status_board.findIndex(\n          (item) => item.title === ticket.status\n        );\n        if (sindex != -1) {\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        } else {\n          let tempBoards = status_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.status,\n            cards: [],\n          });\n          set_status_board(tempBoards);\n          addCardss(ticket.status, status_board, ticket, set_status_board);\n        }\n\n        var pindex = priority_board.findIndex(\n          (item) => item.title === ticket.priority\n        );\n        if (pindex != -1) {\n          addCardss(ticket.priority, priority_board, ticket, set_priority_board);\n        } else {\n          let tempBoards = priority_board;\n          let idd = Date.now() + Math.random() * 2;\n          tempBoards.push({\n            id: idd,\n            title: ticket.priority,\n            cards: [],\n          });\n          set_priority_board(tempBoards);\n          addCardss(ticket.priority, priority_board, ticket, set_priority_board);\n        }\n      });\n    }\n  };\n\n  const addCardss = (name, board, card, set_board) => {\n    console.log(\"red\", name, board, card);\n    const index = board.findIndex((item) => item.title == name);\n    console.log(index);\n    if (index < 0) return;\n    let tempBoards = [...board];\n    console.log(\"reached\");\n    // console.log(...card, \"erere\");\n    const obj = {\n      id: Date.now() + Math.random() * 2,\n      title: card.id,\n      desc: card.title,\n      user: card.userId,\n      status: card.status,\n      tag: card.tag[0],\n      priority: card.priority,\n    };\n    console.log(\"onject\", obj);\n    tempBoards[index].cards.push(obj);\n    set_board(tempBoards);\n  };\n\n  const [boards, setBoards] = useState(\n    status_board\n  );\n\n  // console.log(data);\n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeBoard = (id) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, titlee, descc, user, status, tag, priority) => {\n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n    // console.log(descc);\n    const tempBoards = [...boards];\n    tempBoards[index].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title: titlee,\n      desc: descc,\n      user,\n      status,\n      tag,\n      priority,\n    });\n    setBoards(tempBoards);\n  };\n\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n\n  const dragEnded = (bid, cid) => {\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) return;\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n  };\n\n  const updateCard = (bid, cid, card) => {\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) return;\n\n    tempBoards[index].cards[cardIndex] = card;\n\n    setBoards(tempBoards);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n\n  function abbc() {\n    // console.log(\"fsadfad\");\n    setSortPriority(true);\n  }\n  function bbbc() {\n    // console.log(\"dsffsfs\");\n    setSortPriority(false);\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n        <h1>Kanban Board</h1>\n        <button onClick={abbc}> sort by priority </button>\n        <button onClick={bbbc}> sort by name </button>\n\n      <select name=\"language\" id=\"language\">\n        <option value=\"Grouping\" disabled selected>Grouping</option>\n        <option value=\"User\" onClick={setBoards(user_board)}>User</option>\n        <option value=\"Status\">Status</option>\n        <option value=\"Priority\" >Priority</option>\n      </select>\n\n      </div>\n      <div className=\"app_boards_container\">\n        <div className=\"app_boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              dragEnded={dragEnded}\n              dragEntered={dragEntered}\n              updateCard={updateCard}\n              sortPriority={sortPriority}\n            />\n          ))}\n          <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}